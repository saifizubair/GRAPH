package com.company;

import com.sun.javafx.geom.Edge;

import javax.swing.text.EditorKit;
import java.lang.*;
import java.util.*;
import java.io.*;


public class Main {
    static class edge {
        int src;
        int nbr;
        int wt;

        edge(int src, int nbr, int wt) {
            this.src = src;
            this.nbr = nbr;
            this.wt = wt;
        }
    }
    static String spath;
    static Integer spathwt =Integer.MAX_VALUE;
    static String lpath;
    static Integer lpathwt =Integer.MIN_VALUE;
    static String cpath;
    static Integer cpathwt =Integer.MAX_VALUE;
    static String fpath;
    static Integer fpathwt =Integer.MIN_VALUE;
    public static void multisolver(ArrayList<edge>[]graph,int src,int dest,boolean[]visited,int criteria,String psf, int wsf){
        if (src==dest){
            if (wsf<spathwt){
                spathwt=wsf;
                spath =psf;
            }
            if (wsf>lpathwt){
                lpathwt =wsf;
                lpath =psf;
            }
            if (wsf<criteria &&wsf>fpathwt){
                fpathwt =wsf;
                fpath =psf;
            }
            if (wsf>criteria&&wsf<cpathwt){
                cpathwt =wsf;
                cpath =psf;
            }
        }
        visited[src]=true;
        for (edge e : graph[src]){
            if (!visited[e.nbr]){
                multisolver(graph,e.nbr,dest,visited,criteria,psf+e.nbr,wsf+e.wt);
            }
        }
        visited[src]=false;

    }

    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int vtces = Integer.parseInt(br.readLine());
        ArrayList<edge>[] graph = new ArrayList[vtces];
        for (int i = 0; i < vtces; i++) {
            graph[i] = new ArrayList<>();
        }
        int edges = Integer.parseInt(br.readLine());
        for (int i = 0; i < edges; i++) {
            String[] parts = br.readLine().split(" ");
            int v1 = Integer.parseInt(parts[0]);
            int v2 = Integer.parseInt(parts[1]);
            int wt = Integer.parseInt(parts[2]);
            graph[v1].add(new edge(v1, v2, wt));
            graph[v2].add(new edge(v2, v1, wt));
        }
        int src = Integer.parseInt(br.readLine());
        int dest = Integer.parseInt(br.readLine());
        int crieteria =Integer.parseInt(br.readLine());
        boolean[] visited = new boolean[vtces];
            multisolver(graph, src, dest, visited, crieteria, src + " ", 0);
            System.out.println("smallest path " + spath + " @ " + spathwt);
            System.out.println("largest path " + lpath + " @ " + lpathwt);
            System.out.println("just larger path than " + crieteria + " = " + cpath + " @ " + cpathwt);
            System.out.println("just smaller path than " + crieteria + " = " + fpath + " @ " + fpathwt);
        }
    }





input --
7
8
0 1 10
1 2 10
2 3 10
0 3 40
3 4 2
4 5 3
5 6 3
4 6 8
0
6
40


output --
smallest path 0123456 @ 38
largest path 0346 @ 50
just larger path than 40 = 03456 @ 48
just smaller path than 40 = 0123456 @ 38
