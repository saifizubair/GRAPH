package com.company;

import java.lang.*;
import java.lang.reflect.Array;
import java.nio.Buffer;
import java.util.*;
import java.io.*;


public class Main  {
    static class edge {
        int src;
        int nbr;

        public edge(int src, int nbr) {
            this.src = src;
            this.nbr = nbr;
        }
    }
    static class pair{
        int v;
        int time;

        public pair(int v, int time) {
            this.v = v;
            this.time = time;
        }
    }
    public static void main(String[]args)throws Exception{

        BufferedReader br =new BufferedReader(new InputStreamReader(System.in));
         int vtces =Integer.parseInt(br.readLine());
         ArrayList<edge>[]graph =new ArrayList[vtces];
         for (int i=0;i<vtces;i++){
             graph[i]=new ArrayList<>();
         }
         int edges =Integer.parseInt(br.readLine());
         for (int i=0;i<edges;i++){
             String parts[]=br.readLine().split(" ");
             int v1 =Integer.parseInt(parts[0]);
             int v2 =Integer.parseInt(parts[1]);
             graph[v1].add(new edge(v1,v2));
             graph[v2].add(new edge(v2,v1));
         }
         int src =Integer.parseInt(br.readLine());
         int t =Integer.parseInt(br.readLine());
         int count =0;
         int []visited =new int[vtces];
         ArrayDeque<pair>queue =new ArrayDeque<>();
         queue.add(new pair(src,1));
         while (queue.size()>0){
             pair rem =queue.removeFirst();
             if (visited[rem.v]>0){
                 continue;
             }
             visited[rem.v]= rem.time;
             if (rem.time>t){
                 break;
             }
             else {
                 count++;
             }
             for (edge e :graph[rem.v]){
                 if (visited[e.nbr]==0){
                     queue.add(new pair(e.nbr, rem.time+1));
                 }
             }
         }
         System.out.println(count);
    }

}


input --.
7
8
0 1 10
1 2 10
2 3 10
0 3 10
3 4 10
4 5 10
5 6 10
4 6 10
6
3

output-->
4
